buildscript {
  ext.kotlin_version = '1.3-M2'
  repositories {
    maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath "com.github.shyiko:ktlint:0.27.0"
  }
}

plugins {
  id "com.gradle.build-scan" version "1.15.2"
  id 'com.github.ben-manes.versions' version '0.20.0'
  id 'net.nemerosa.versioning' version '2.7.1'
  id 'io.codearte.nexus-staging' version '0.11.0'
//  id 'org.jmailen.kotlinter' version '1.16.0'
}

buildScan { licenseAgreementUrl = 'https://gradle.com/terms-of-service'; licenseAgree = 'yes' }

description = 'RSocket CLI.'

ext.junitJupiterVersion = '5.2.0'

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'maven'
apply plugin: 'maven-publish'

group = 'com.baulsupp'
mainClassName = "io.rsocket.cli.Main"

versioning {
  releaseMode = project.hasProperty('releaseMode') ? project.property('releaseMode') : 'snapshot'
}

version = versioning.info.display

tasks.withType(JavaCompile) {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8
}

compileKotlin {
  kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
  kotlinOptions.jvmTarget = "1.8"
}

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

distTar {
  compression = Compression.GZIP
}

task sourceJar(type: Jar) {
  from sourceSets.main.allSource
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      artifact sourceJar {
        classifier "sources"
      }
    }
  }
}

repositories {
  mavenLocal()
  maven { url 'https://repo.spring.io/milestone' }
  maven { url 'https://oss.jfrog.org/libs-snapshot' }
  maven { url 'https://dl.bintray.com/reactivesocket/RSocket' }
  maven { url "https://oss.sonatype.org/content/repositories/releases" }
  maven { url "https://jitpack.io" }
  maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }
  mavenCentral()
  jcenter()
}

dependencies {
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:0.25.1-eap13"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:0.25.1-eap13"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-reactive:0.25.1-eap13"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-reactor:0.25.1-eap13"

  implementation 'io.rsocket:rsocket-transport-netty:0.11.5'
  implementation 'io.rsocket:rsocket-transport-local:0.11.5'
  implementation 'io.rsocket:rsocket-core:0.11.5'

  implementation 'io.airlift:airline:0.8'
  implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.9.6'
  implementation 'com.fasterxml.jackson.core:jackson-core:2.9.6'
  implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.6'
  implementation 'com.fasterxml.jackson.module:jackson-module-afterburner:2.9.6'
  implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.9.6'

  implementation 'org.eclipse.jetty.http2:http2-http-client-transport:9.4.11.v20180605'
  implementation 'org.mortbay.jetty.alpn:alpn-boot:8.1.12.v20180117'
  implementation 'com.spotify:completable-futures:0.3.2'

  implementation 'com.baulsupp:oksocial-output:4.17.0'

  implementation 'org.slf4j:slf4j-jdk14:1.8.0-beta2'

  // JUnit Jupiter API and TestEngine implementation
  testCompile "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
  testRuntime "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"

  // If you also want to support JUnit 3 and JUnit 4 tests
  testRuntime "org.junit.vintage:junit-vintage-engine:5.2.0"

  testRuntime "org.junit.platform:junit-platform-launcher:1.2.0"

  testCompile "org.jetbrains.kotlin:kotlin-test:${kotlin_version}"
  testCompile "org.jetbrains.kotlin:kotlin-test-junit:${kotlin_version}"

  testRuntime 'org.slf4j:slf4j-jdk14:1.8.0-beta2'

  testCompile 'com.squareup.okhttp3:okhttp-testing-support:3.11.0'
  testCompile 'com.squareup.okhttp3:mockwebserver:3.11.0'
}

test {
  testLogging.showStandardStreams = false
}

dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = (selection.candidate.group == "io.netty" && selection.candidate.version ==~ /5\..*/) ||
        (selection.candidate.version ==~ /.*(beta.*|M\d|alpha.*)/)
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

test {
  useJUnitPlatform {
    excludeTags 'slow'
    includeEngines 'junit-jupiter', 'junit-vintage'
  }

  failFast = true
}

